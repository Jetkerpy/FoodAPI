# Generated by Django 4.2.3 on 2023-07-26 17:59

import backend.product.utils
import backend.product.validators
from django.db import migrations, models
import django.db.models.deletion
import django_resized.forms


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Format: required, max-100",
                        max_length=100,
                        unique=True,
                        verbose_name="category name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="format: required, letter, numbers, underscore.",
                        max_length=100,
                        unique=True,
                        verbose_name="SAFE URL",
                    ),
                ),
                (
                    "image",
                    django_resized.forms.ResizedImageField(
                        crop=None,
                        force_format="WEBP",
                        help_text="format: required",
                        keep_meta=True,
                        quality=100,
                        scale=1.0,
                        size=[1920, 1080],
                        upload_to=backend.product.utils.get_upload_path,
                        verbose_name="The image for the category",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="defaul: True, if False will not show to customers",
                        verbose_name="Is active",
                    ),
                ),
            ],
            options={
                "verbose_name": "product category",
                "verbose_name_plural": "product categories",
            },
        ),
        migrations.CreateModel(
            name="Ingredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=150, verbose_name="ingredient name"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="format: required, max-200",
                        max_length=200,
                        unique=True,
                        verbose_name="product name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="format: required, letters, numbers etc",
                        max_length=200,
                        verbose_name="Product SAFE URL",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="format: required", verbose_name="product description"
                    ),
                ),
                (
                    "original_price",
                    models.DecimalField(
                        decimal_places=2,
                        error_messages={
                            "name": {
                                "max_lenght": "the price must be between 0 and 99999999.99"
                            }
                        },
                        help_text="format: maximum price 99999999.99",
                        max_digits=10,
                        validators=[
                            backend.product.validators.validate_positive,
                            backend.product.validators.validate_max_digits,
                        ],
                        verbose_name="original price",
                    ),
                ),
                (
                    "discount_percent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="format: not required",
                        max_digits=4,
                        null=True,
                        validators=[
                            backend.product.validators.validate_discount_percent_of_positive,
                            backend.product.validators.validate_discount_percent_maximum,
                        ],
                        verbose_name="discount percentage",
                    ),
                ),
                (
                    "discounted_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="format: the maximum price is 99999999.99, but it will be a discounted price, so it will be less than the original price, and also when the discount percentage is met, it will be automatically saved :)",
                        max_digits=10,
                        null=True,
                        verbose_name="discounted price",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=1, verbose_name="product quantity"
                    ),
                ),
                (
                    "image",
                    django_resized.forms.ResizedImageField(
                        blank=True,
                        crop=None,
                        default="product_images/no-food.webp",
                        force_format="WEBP",
                        help_text="format: not required",
                        keep_meta=True,
                        null=True,
                        quality=100,
                        scale=1.0,
                        size=[1920, 1080],
                        upload_to=backend.product.utils.get_upload_path,
                        verbose_name="product image",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="format: true=product visible",
                        verbose_name="product visibility",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="format: Y-m-d H:M:S",
                        verbose_name="date product created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="format: Y-m-d H:M:S",
                        verbose_name="date product last updated",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="products",
                        to="product.category",
                    ),
                ),
                (
                    "ingredients",
                    models.ManyToManyField(
                        to="product.ingredient", verbose_name="product ingredients"
                    ),
                ),
            ],
            options={
                "verbose_name": "Product",
                "verbose_name_plural": "Products",
            },
        ),
    ]
